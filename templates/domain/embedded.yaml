name: embedded
description: "Embedded systems development template"
type: domain
inherits: minimal

overrides:
  sanitizers: false
  exceptions: false
  rtti: false
  pic: false
  stdlib: limited
  freestanding: true
  static_linking: true

compiler_flags:
  - "-fno-exceptions"
  - "-fno-rtti"
  - "-ffreestanding"
  - "-fno-use-cxa-atexit"
  - "-fno-stack-protector"
  - "-fdata-sections"
  - "-ffunction-sections"
  - "-Os"  # Optimize for size

linker_flags:
  - "-Wl,--gc-sections"  # Remove unused sections
  - "-static"
  - "-nostdlib"

cmake_options:
  - "CMAKE_CXX_STANDARD_LIBRARIES=\"\""
  - "CMAKE_EXE_LINKER_FLAGS=\"-static -nostdlib\""

cmake_template_additions: |
  # Embedded-specific configuration
  set(CMAKE_SYSTEM_NAME Generic)

  # Disable standard libraries
  set(CMAKE_CXX_STANDARD_LIBRARIES "")
  set(CMAKE_C_STANDARD_LIBRARIES "")

  # Size optimization flags
  target_compile_options(project_warnings INTERFACE
    -fno-exceptions
    -fno-rtti
    -ffreestanding
    -fno-use-cxa-atexit
    -fno-stack-protector
    -fdata-sections
    -ffunction-sections
    -Os
    -fno-common
  )

  target_link_options(project_warnings INTERFACE
    -Wl,--gc-sections
    -static
    -nostdlib
  )

  # Embedded-specific defines
  target_compile_definitions(project_warnings INTERFACE
    EMBEDDED_BUILD=1
    NO_EXCEPTIONS=1
    NO_RTTI=1
  )

files:
  - path: "main.cpp"
    content: |
      // Embedded main - no standard library
      extern "C" {{
          // Minimal required symbols
          void* __dso_handle = 0;

          // Custom new/delete for embedded
          void* operator new(size_t) {{ return nullptr; }}
          void operator delete(void*) noexcept {{}}
          void operator delete(void*, size_t) noexcept {{}}
      }}

      // Entry point
      extern "C" int main() {{
          // Your embedded application code here

          while(1) {{
              // Main loop
          }}

          return 0;
      }}

  - path: "embedded_config.h"
    content: |
      #pragma once

      // Embedded system configuration
      #define EMBEDDED_BUILD 1
      #define NO_EXCEPTIONS 1
      #define NO_RTTI 1
      #define NO_STDLIB 1

      // Memory constraints
      #define MAX_STACK_SIZE 4096
      #define MAX_HEAP_SIZE 8192

      // Disable heavy standard library features
      #define DISABLE_IOSTREAM 1
      #define DISABLE_STL_CONTAINERS 1

toolchain_options:
  cross_compile: true
  target_arch: "arm-none-eabi"
  suggested_toolchains:
    - "arm-none-eabi-gcc"
    - "arm-linux-gnueabihf-gcc"

documentation: |
  This template is designed for embedded systems development:

  - No C++ exceptions or RTTI (smaller binary size)
  - Freestanding environment (no standard library)
  - Size-optimized compilation (-Os)
  - Static linking only
  - Dead code elimination enabled
  - Custom memory management hooks

  Features disabled for embedded constraints:
  - Standard library (iostream, containers, etc.)
  - Dynamic memory allocation
  - Exception handling
  - Runtime type information
  - Stack protection (saves memory)

  Best for:
  - Microcontroller development
  - Real-time systems
  - Memory-constrained devices
  - Bootloaders and firmware
  - IoT devices
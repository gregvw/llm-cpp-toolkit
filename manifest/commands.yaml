schema: 1
commands:
  doctor:
    description: Inspect environment and report tool availability.
    outputs:
      - path: "exports/doctor.json"
        schema:
          _meta:
            generated_at: string
          tool:
            found: bool
            path: string|null
            version_line: string|null

  context-export:
    description: Collect artifacts LLMs rely on.
    runs:
      - "modules/compile_db.sh"
      - "modules/cmake_introspect.sh"
    outputs:
      - path: "exports/compile_commands.json"
      - path: "exports/cmake-file-api/*.json"
      - path: "exports/context.json"
        schema:
          compile_commands: string|null
          cmake_file_api:
            dir: string
            files: [string]
          generated_at: string
    json_summary: "exports/context.json"

  analyze:
    description: Run clang-tidy + IWYU + cppcheck with JSON reports.
    args:
      - name: paths
        variadic: true
      - name: sarif
        flag: true
        description: "Output results in SARIF format"
    runs:
      - "modules/analyze.sh"
    outputs:
      - path: "exports/reports/clang-tidy.json"
        schema:
          available: bool
          version: string|null
          inputs: [string]
          diagnostics:
            - file: string
              line: int
              col: int
              severity: string
              msg: string
              check: string|null
          fixes:
            - file: string
              message: string
              file_offset: int
              replacements:
                - file: string
                  offset: int
                  length: int
                  replacement: string
      - path: "exports/reports/iwyu.json"
        schema:
          available: bool
          version: string|null
          suggestions:
            - file: string
              add: [string]
              remove: [string]
      - path: "exports/reports/cppcheck.json"
        schema:
          available: bool
          version: string|null
          diagnostics:
            - id: string
              severity: string
              msg: string
              verbose: string
              locations:
                - file: string
                  line: int
                  column: int
      - path: "exports/reports/analysis.sarif"
        condition: "sarif flag set"
        schema:
          version: string
          "$schema": string
          runs:
            - tool:
                driver:
                  name: string
                  version: string
                  rules: [object]
              results:
                - ruleId: string
                  message:
                    text: string
                  level: string
                  locations: [object]

  test:
    description: Run CTest suites and emit structured results for LLM consumption.
    args:
      - name: build-dir
        description: "CMake build directory to run tests from"
      - name: regex
        description: "Only run tests matching this regular expression (-R)"
      - name: exclude
        description: "Exclude tests matching this regular expression (-E)"
      - name: label
        description: "Only run tests with labels matching this regex (-L)"
      - name: parallel
        description: "Number of parallel test jobs (-j)"
      - name: timeout
        description: "Timeout in seconds for each test"
      - name: rerun-failed
        flag: true
        description: "Re-run tests that previously failed"
      - name: preview
        flag: true
        description: "List tests without executing them"
      - name: json
        description: "Optional path for the JSON summary"
      - name: sarif
        description: "Optional path for the SARIF report"
    outputs:
      - path: "exports/tests/ctest_results.json"
        schema:
          _meta:
            generated_at: string
            ctest_command: string
            build_dir: string
            ctest_version: string|null
            return_code: int
            duration_seconds: number
            stdout: string
            stderr: string
            xml: string|null
          stats:
            total: int
            passed: int
            failed: int
            timeout: int
            notrun: int
            skipped: int
            unknown: int
            duration_seconds: number
          failures:
            - name: string
              status: string
              fail_reason: string|null
          tests:
            - name: string
              status: string
              duration: number|null
              labels: [string]
              fail_reason: string|null
      - path: "exports/tests/ctest_results.sarif"
      - path: "exports/tests/Test.xml"
        condition: "when CTest XML is generated"
      - path: "exports/tests/ctest_stdout.txt"
      - path: "exports/tests/ctest_stderr.txt"

  bench:
    description: Benchmark configure/build/test workflows and report performance insights.
    args:
      - name: build-dir
        description: "CMake build directory to use"
      - name: std
        description: "C++ standard for configure"
      - name: build-type
        description: "CMake build type"
      - name: generator
        description: "CMake generator"
      - name: runs
        description: "Hyperfine runs per stage"
      - name: warmup
        description: "Hyperfine warmup runs"
      - name: target
        description: "Optional build target"
      - name: jobs
        description: "Parallel build jobs"
      - name: skip-configure
        flag: true
        description: "Skip the configure stage"
      - name: skip-build
        flag: true
        description: "Skip the build stage"
      - name: skip-test
        flag: true
        description: "Skip the test stage"
      - name: fresh
        flag: true
        description: "Remove the build directory before configuring"
      - name: keep-output
        flag: true
        description: "Stream full command output instead of filtered highlights"
      - name: top-slowest
        description: "Number of slow translation units to report"
    outputs:
      - path: "exports/perf/bench.json"
      - path: "exports/perf/*/bench.json"
      - path: "exports/perf/*/logs/*.log"
      - path: "exports/perf/*/metrics/*.jsonl"
      - path: "exports/perf/*/hyperfine/*.json"
    json_summary: "exports/perf/bench.json"

  stderr-thin:
    description: Collapse compiler stderr into deterministic, budget-aware highlights.
    args:
      - name: log
        description: "Path to stderr log to thin"
      - name: compile
        description: "Substring filter for compile_commands.json entries"
      - name: compile-index
        description: "Explicit index into compile_commands.json"
      - name: level
        description: "Detail level (summary|focused|detailed)"
      - name: context-budget
        description: "Maximum characters in the thinned output"
    outputs:
      - path: "exports/diagnostics/stderr-thin.json"
        schema:
          _meta:
            generated_at: string
            level: string
            context_budget: int
            structured_source: string
          counts:
            error: int
            warning: int
            note: int
            remark: int
            other: int
          view:
            path: string
            level: string
            context_budget: int
            context_used: int
            context_full: int
            context_truncated: int
          highlights: [string]
      - path: "exports/diagnostics/stderr-thin.txt"
      - path: "exports/diagnostics/stderr-raw.txt"
    examples:
      - "llmtk stderr-thin --log build.log"
      - "llmtk stderr-thin --compile main.cpp --level=summary"
      - "llmtk stderr-thin --context-budget=4000 -- cmake --build build"

  reduce:
    description: Minimize a failing repro with cvise.
    args:
      - { name: input, required: true }
      - { name: test_cmd, required: true }
    runs:
      - "modules/reduce.sh"
    outputs:
      - path: "exports/repros/minimized.cpp"
      - path: "exports/repros/report.json"
        schema:
          cvise_available: bool
          exit_code: int|null
          input: string

  capabilities:
    description: Emit machine-readable toolkit capabilities summary.
    outputs:
      - path: "exports/capabilities.json"
        schema:
          _meta:
            generated_at: string
            toolkit_version: string
            tools_manifest: string
            commands_manifest: string
          tools: object
          commands: object

  tidy:
    description: Run clang-tidy with optional fix application.
    args:
      - name: paths
        variadic: true
      - name: apply
        flag: true
        description: "Apply suggested fixes"
      - name: checks
        description: "Specify which checks to run"
    examples:
      - "llmtk tidy src/"
      - "llmtk tidy --apply src/"
      - "llmtk tidy --checks='*' src/"

  format:
    description: Run clang-format on code with check or apply options.
    args:
      - name: paths
        variadic: true
      - name: check
        flag: true
        description: "Check if files are formatted (dry run)"
      - name: apply
        flag: true
        description: "Apply formatting changes"
      - name: style
        description: "Formatting style (file, LLVM, Google, etc.)"
    examples:
      - "llmtk format --check src/"
      - "llmtk format --apply src/"
      - "llmtk format --style=Google src/"

  gate:
    description: Enforce SARIF severity budgets for CI gating.
    args:
      - name: sarif_file
        required: true
        description: "Path to SARIF file to check"
      - name: max-errors
        description: "Maximum allowed errors (default: 0)"
      - name: max-warnings
        description: "Maximum allowed warnings (default: 10)"
      - name: max-notes
        description: "Maximum allowed notes (default: 50)"
      - name: config
        description: "Path to gate configuration file"
    outputs:
      - exit_code: "0 for pass, 1 for fail"
    examples:
      - "llmtk gate exports/reports/analysis.sarif"
      - "llmtk gate --max-warnings=5 analysis.sarif"
      - "llmtk gate --config=.llmtk-gate.yaml analysis.sarif"

  deps:
    description: Extract and export CMake target dependency graphs for agent consumption.
    args:
      - name: build-dir
        description: "CMake build directory (default: build)"
      - name: output-dir
        description: "Output directory (default: exports/dependency_graphs)"
      - name: json
        flag: true
        description: "Export JSON format (default)"
      - name: graphviz
        flag: true
        description: "Export Graphviz DOT format"
      - name: symbols
        flag: true
        description: "Include symbol-level analysis"
    outputs:
      - path: "exports/dependency_graphs/dependencies.json"
        schema:
          _meta:
            generated_at: number
            build_dir: string
            codemodel_available: bool
            targets_count: int
            symbol_analysis_available: bool
          targets:
            target_name:
              name: string
              type: string
              sources: [string]
              link_libraries: [string]
              dependencies:
                - name: string
                  type: string
                  path: string|null
              compile_definitions: [string]
              include_directories: [string]
              install_destination: string|null
          symbol_dependencies:
            target_name:
              defined_symbols: [string]
              undefined_symbols: [string]
              exported_symbols: [string]
              symbol_dependencies: [string]
          package_managers:
            vcpkg: object|null
            conan: object|null
            find_package_calls:
              - package: string
                file: string
          dependency_matrix: [[string]]
          build_order: [string]
      - path: "exports/dependency_graphs/dependencies.dot"
        condition: "when --graphviz flag is used"
    examples:
      - "llmtk deps"
      - "llmtk deps --graphviz"
      - "llmtk deps --json --graphviz --symbols"
      - "llmtk deps --build-dir=custom_build --output-dir=custom_exports"

{
  "timestamp": "2025-09-18T02:51:55+00:00",
  "project_root": "/home/greg/Projects/github/llm-cpp-toolkit",
  "file_tree": [
  "./README.md",
  "./appimage/build-appimage.sh",
  "./appimage/AppImageBuilder.yml",
  "./build_manager.py",
  "./exports/context.json",
  "./exports/reports/cppcheck.json",
  "./exports/reports/clang-tidy.json",
  "./exports/reports/iwyu.json",
  "./exports/context_20250918_025155.json",
  "./exports/compile_commands.json",
  "./exports/doctor.json",
  "./.git/FETCH_HEAD",
  "./.git/COMMIT_EDITMSG",
  "./.git/packed-refs",
  "./.git/description",
  "./.git/objects/d8/7d6bcd0a169e90efaaa372b4162f2b2cd57bd0",
  "./.git/objects/86/dcc08c6612f7a6a2b0d861063c58e655f9ca8e",
  "./.git/objects/9c/2b203afca2520b0c1b4285e35193303747d1ee",
  "./.git/objects/90/d2188604e1cf1979c72a92504707a6ee38b96f",
  "./.git/objects/26/c0480739145c7502c473fc7d85892ed06ba4e9",
  "./.git/objects/3e/87be18a88f1a6a430defe03d76e5473ab728e3",
  "./.git/objects/14/dd7c7211fde6dd043c243cd69048e83bfe97a5",
  "./.git/objects/b7/d08d37d7a0fecc2a4b874ade963a56e208ff7d",
  "./.git/objects/6e/392b7f562cfe68a71bcd6fbb49cbcb45e159d8",
  "./.git/objects/6e/8bf73aa550d4c57f6f35830f1bcdc7a4a62f38",
  "./.git/objects/f9/147aa634a2ef58bf5a367923ce2debcb27b98a",
  "./.git/objects/18/638b70d3c3346635b627eb432a0968b75ee0cd",
  "./.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391",
  "./.git/objects/6b/e8513ec7dc94d92aa76e8e8b74dddcc1b688a9",
  "./.git/objects/ea/b509af5161df50e086808db917cba7968a021d",
  "./.git/objects/aa/7c5161313d3a332a3e9a7b12f9ebee87735ac5",
  "./.git/objects/aa/e7a213ec418bfeb0aafea6dec00069bb52e825",
  "./.git/objects/b4/db610514ffbd30cf480268f1412cc630ba237f",
  "./.git/objects/dc/b12df50e2fd51a905a8db1f3ef406ff3c6e131",
  "./.git/objects/d2/74f96974b55fdb3831dc8950293f420ed5f635",
  "./.git/objects/41/456c59503014a0e78189f71827706cc3cbcf7b",
  "./.git/objects/fe/51488c7066f6687ef680d6bfaa4f7768ef205c",
  "./.git/objects/04/34ce90098fde880349b90899810e1c53e00133",
  "./.git/objects/e3/26a55ef3857950b013078ac32af98632eb28a6",
  "./.git/objects/22/f3d9febf91fb2335ee8edfef4dc8220ecc57ff",
  "./.git/objects/a8/cededecbe5651f9464fa90c1c0f96d9923730a",
  "./.git/objects/a8/2d37d3b49ddb7234d346554b0082305cb0ca7d",
  "./.git/objects/32/8668e2b1dcb212d2c508a10b9d938fa178085f",
  "./.git/objects/32/3cc603a5adc3a6009dd3a6b4365ed95e1b276d",
  "./.git/objects/2d/287a96fca0614bbf7c3e8e40911a8ca36bddcb",
  "./.git/objects/e8/1475a6fdc921bff9ec8164fbdf78b98949ba53",
  "./.git/objects/0f/fa9333bdbd5b966849a2a340ac0ec00d7c36d9",
  "./.git/objects/0f/730e38fc90ff77564a42833e5cb8282c16ccea",
  "./.git/objects/83/3ce10abfe515aee0f05eb5c7a8e665b770e21e",
  "./.git/objects/83/fd7a78a5b0fe1c0dba953d7ac2455e9ff8fbc9",
  "./.git/objects/83/81d61429f959b82b735e4373b1332539663e45",
  "./.git/objects/d9/cfb802c7ea5937a4f140d85d22c0cf01d241e9",
  "./.git/objects/78/49b57ffa0826c761f12fe90bbc6847cd93b825",
  "./.git/objects/78/a4dddebdcdeea9d09aa2e4a43061b84d769433",
  "./.git/objects/48/d4903e06485d8248955c3da6057c01d36c6702",
  "./.git/objects/31/cd082e0785cd833df610b969997ece1f173c0a",
  "./.git/objects/c8/4e0006ff715937e9afbfab2ada0c9d9dc24ee7",
  "./.git/objects/b3/d1404de6642dbd4d9c5aba6f2ee2bca609b451",
  "./.git/objects/b3/f3c0cd24ac6b011316e4c50427dc75996e35bf",
  "./.git/objects/1c/52b714a137ad371abab0131f1033c910d78a86",
  "./.git/objects/9e/44ab2cbbd06bb244e3d09a2e7eaa9ce5078316",
  "./.git/objects/9e/6bce6c1521d9fef68935e54f67e3657fa4f2e2",
  "./.git/objects/b1/cc8b3379734e1bc3f3f27ffabec98d730628ad",
  "./.git/objects/d4/3aef0aa20d929b627993fea83db920fdf6be98",
  "./.git/objects/25/7b56abfe3bd5cf8b7066b92c7902646c31d794",
  "./.git/objects/99/97ccdfb7977a0f431b2495e2ca15480e7f0f4f",
  "./.git/objects/3f/fb03f1671ce939a740d6fe84908483db92519b",
  "./.git/objects/5b/4d99a8229128bd1d6f7fc7880e9657d2d5f861",
  "./.git/objects/c4/a06d6998d343f51f3deba584280a01e9db4b6d",
  "./.git/objects/03/4308afabe20a2d7ecf80bab536d900b8ff65c0",
  "./.git/objects/ec/4f41dd0de17bd8d83e72508b6f17407fda7581",
  "./.git/objects/2c/d90da3e0eaf8040d1d6b1a74ddc5e253218b43",
  "./.git/objects/01/21e3af8843b5bb76d345bb6218737759d02dc9",
  "./.git/objects/ca/e88c599187c172e231e44cc5843a45410d7c06",
  "./.git/objects/ca/00e44180da9ff0a25d808a7ab2894fbceee18f",
  "./.git/objects/a7/79c75c0d5527441acb586930632ed85c51de9d",
  "./.git/objects/8e/ec79ba112b68babfdfc199a4d99936ac3f6e1d",
  "./.git/objects/84/8b5cd3f3de6a267df5f16d269543fcbee9279e",
  "./.git/objects/fb/b2eb845d65b7e23fb9b847b88fc36c3ed21e3d",
  "./.git/objects/3c/cd9056e31846bee5f5a15c9bf13be036dd7099",
  "./.git/objects/da/223d07502081a536ec791f6a05de115e06f86c",
  "./.git/objects/cf/5af1959f765e0d29f879b5691e6007eda6b195",
  "./.git/objects/bd/cc0601bdb7d0092c376ae1f50fbd0ac1dbecc2",
  "./.git/objects/3a/8407bc54fc9b4d102265ede633f143fdb335ef",
  "./.git/objects/a3/2ad12159e1fea508f4c413202aef1050ede6b0",
  "./.git/objects/00/a70cba57d56456221e9b7f50782a31f6bce4cd",
  "./.git/objects/5c/bd74172dcc1fb947f96c50c51bb69d692bd3d0",
  "./.git/objects/07/cabfa74f5ed60f16aa22c4676b83e4a5c9eea2",
  "./.git/objects/87/33198790538d83f029efee5be09205f2ddbcd9",
  "./.git/objects/f2/11d88578fdb2b02ed42b16b03df6928ee33820",
  "./.git/objects/69/97f9886016d790d3cc86122bdba5e96032e43e",
  "./.git/objects/bf/ee91914424d96a2f48ceae7706e5c22b7a0b19",
  "./.git/objects/bf/0dc89767a4ade6769147359accf747858390f4",
  "./.git/objects/64/ee07fb26ae9f2cd3f425d22aba0e4ff9631fba",
  "./.git/objects/6c/a4f6e1987f78f33580ea8673bb83f0d846c9f5",
  "./.git/objects/4d/d72e870c4741e19b9628c6f8d8978f3190fee9",
  "./.git/objects/82/85cf55cc4019a3e665aedc08e17d84da8fa85d",
  "./.git/objects/98/8d9362d0e7f009204da90d65168579de05e38c",
  "./.git/objects/98/8cf792f09860418e1bfbc7f962a594c3b6f7b5",
  "./.git/objects/02/b5be0a172a23df49ffd39f5ed622fd9b721a2a",
  "./.git/objects/f4/4a4fbf65bb264e41f10fd398709d44a5227597",
  "./.git/objects/a1/e510ea5e2931449372221535f833ef5eb2db2d",
  "./.git/objects/46/05720146ef67951e96ed35a8ffec48f917b399",
  "./.git/objects/72/266536dfdc9be2517e99d57c0df259dd432e05",
  "./.git/objects/72/3e8b9388dffe37004c8ef2487ad59080143bdf",
  "./.git/objects/9f/04f3cafde7c50fa215961eece5fe54de8354f2",
  "./.git/objects/c2/ec7120ece19cbebe389841ad02bc062b6ef992",
  "./.git/objects/pack/pack-df77238b3f222db343f3e03275a56a3228b72ad3.rev",
  "./.git/objects/pack/pack-df77238b3f222db343f3e03275a56a3228b72ad3.idx",
  "./.git/objects/pack/pack-df77238b3f222db343f3e03275a56a3228b72ad3.pack",
  "./.git/objects/5d/863f5d1cc50d9d282e255d5ec6815a7c51a19c",
  "./.git/objects/df/788fb3830becf7bca699ab2342205c1c127b14",
  "./.git/objects/cc/c6e0bb5173a79db6ee628665be1f126abb6598",
  "./.git/objects/a9/1c20458d1e07ac1589bfcefcf2ad0b004dc464",
  "./.git/objects/15/a457bc856c795503ce71fe90c0bfa548c173b6",
  "./.git/objects/e0/f5a55e1d265d4bbffe07b1fc470dfad3a68a88",
  "./.git/objects/2a/595315942c3b3b864a14384e44681468efec27",
  "./.git/objects/4c/1ef949442d1ce25d1e0e9b328e0425c9f93c6c",
  "./.git/objects/f6/c6260fa90fcffcf45635f901b6829f634d4fc4",
  "./.git/objects/88/6f4a924e326f795f3408b8027f6dab7f101bb1",
  "./.git/HEAD",
  "./.git/info/exclude",
  "./.git/config",
  "./.git/hooks/pre-rebase.sample",
  "./.git/hooks/post-update.sample",
  "./.git/hooks/push-to-checkout.sample",
  "./.git/hooks/pre-commit.sample",
  "./.git/hooks/sendemail-validate.sample",
  "./.git/hooks/fsmonitor-watchman.sample",
  "./.git/hooks/prepare-commit-msg.sample",
  "./.git/hooks/pre-applypatch.sample",
  "./.git/hooks/pre-merge-commit.sample",
  "./.git/hooks/update.sample",
  "./.git/hooks/pre-receive.sample",
  "./.git/hooks/applypatch-msg.sample",
  "./.git/hooks/commit-msg.sample",
  "./.git/hooks/pre-push.sample",
  "./.git/logs/HEAD",
  "./.git/logs/refs/heads/main",
  "./.git/logs/refs/remotes/origin/main",
  "./.git/logs/refs/remotes/origin/HEAD",
  "./.git/index",
  "./.git/refs/heads/main",
  "./.git/refs/remotes/origin/main",
  "./.git/refs/remotes/origin/HEAD",
  "./AGENTS.md",
  "./DISTRIBUTION.md",
  "./.github/workflows/release.yml",
  "./.npmignore",
  "./LICENSE",
  "./build/.cmake/api/v1/query/codemodel-v2",
  "./VERSION",
  "./compile_commands.json",
  "./flatpak/io.github.gregvw.llm-cpp-toolkit.yml",
  "./flatpak/build-flatpak.sh",
  "./flatpak/io.github.gregvw.llm-cpp-toolkit.svg",
  "./flatpak/io.github.gregvw.llm-cpp-toolkit.desktop",
  "./docs/README.md",
  "./docs/QUICKSTART.md",
  "./docs/REFERENCE.md",
  "./snap/build-snap.sh",
  "./snap/snapcraft.yaml",
  "./homebrew/llm-cpp-toolkit.rb",
  "./install.sh",
  "./package.json",
  "./manifest/tools.yaml",
  "./manifest/commands.yaml",
  "./build-packages.sh",
  "./presets/.clang-format",
  "./presets/.clang-tidy",
  "./llmtk",
  "./cli/llmtk",
  "./modules/reduce.sh",
  "./modules/compile_db.sh",
  "./modules/doctor.sh",
  "./modules/cmake_introspect.sh",
  "./modules/analyze.sh",
  "./modules/context-export.sh",
  "./.claude/settings.local.json"
],
  "cpp_files": [],
  "cmake_files": [
  "./build/.cmake"
],
  "includes": [],
  "functions": [
  "OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ",
  "# Install from Snap Store (when published)",
  "# Install from Flathub (when published)",
  "# Add tap and install (when published)",
  "- Flatpak runtimes (org.freedesktop.Platform//23.08)",
  "def strip_ansi(text: str) ",
  "def relativize(path_str: str, root: Path) ",
  "        return str(path.relative_to(root)",
  "def collect_translation_units(compile_db: Optional[Path], filters: List[str], root: Path) ",
  "    def matches(path: Path) ",
  "        if not matches(file_path)",
  "def parse_clang_tidy_output(output: str, root: Path) ",
  "def limited_text(text: str, max_chars: int = 16000, max_lines: int = 200) ",
  "    if len(lines) ",
  "    if len(text) ",
  "def run_clang_tidy(tus: List[Path], compile_db: Optional[Path], exports_dir: Path, root: Path) ",
  "        result[\"export_fixes\"] = str(fix_path.relative_to(root)) if fix_path.is_file() else str(fix_path)",
  "def parse_iwyu_output(output: str, root: Path) ",
  "def run_iwyu(tus: List[Path], compile_db: Optional[Path], root: Path) ",
  "    for candidate in (\"iwyu_tool\", \"iwyu_tool.py\")",
  "def parse_cppcheck_xml(xml_text: str, root: Path) ",
  "def run_cppcheck(tus: List[Path], compile_db: Optional[Path], root: Path) ",
  "def main() ",
  "    if len(sys.argv) ",
  "        raise SystemExit(\"Usage: analyze.py <exports_dir> <compile_db> [paths...]\")",
  "    def write_report(filename: str, payload: dict) ",
  "1. One repo (e.g., llm-cpp-toolkit/) ",
  "- A tiny wrapper CLI (llmtk) ",
  "- “Context pack” commands to export artifacts LLMs thrive on (compile DB, CMake JSON, logs)",
  "- A llmtk context export that gathers canonical inputs (e.g., `compile_commands.json`, sanitizer logs, perf traces)",
  "3. Standard compilation tools (`manifest/tools.yml`) ",
  "    │  ├─ install.sh                # distro-agnostic installer (Apt/Yum/Dnf/Pacman)",
  "-   **sd**: An intuitive find-and-replace command-line tool (alternative to `sed`)",
  "-   **yq**: A command-line processor for YAML, JSON, and XML (a `jq` equivalent)",
  "-   **tokei**: A tool that displays statistics about your code (lines, files, comments)",
  "## Why CLI-first is easier (and better)",
  "def run(cmd, **kw)",
  "def cmd_doctor(_)",
  "def cmd_context_export(args)",
  "def cmd_analyze(args)",
  "def main()",
  "* Swap stubs with real invocations (clang-tidy with `-export-fixes`, IWYU parsing, cppcheck XML→JSON)",
  "## How an agent (Codex, etc.) ",
  "    echo \"[warn] No supported package manager found (apt/dnf/pacman/brew)",
  "### Quick Install (npm)",
  "def get_version() ",
  "def run(cmd, cwd=None, check=True)",
  "def write_json(path: pathlib.Path, data)",
  "def load_yaml(path: pathlib.Path)",
  "        with open(path, 'r') ",
  "def generate_reference_md(out_path: pathlib.Path)",
  "    if tools and isinstance(tools, dict) ",
  "        for name in sorted(tools[\"tools\"].keys()",
  "            if isinstance(t.get(\"check\")",
  "    if commands and isinstance(commands, dict) ",
  "        for name in sorted(commands[\"commands\"].keys()",
  "                    if isinstance(a, dict)",
  "                    if isinstance(o, str)",
  "                    elif isinstance(o, dict)",
  "def cmd_docs(_)",
  "def cmd_doctor(_)",
  "def cmd_context_export(args)",
  "    if not (EXPORTS/\"compile_commands.json\")",
  "            \"files\": sorted([p.name for p in (EXPORTS/\"cmake-file-api\")",
  "def cmd_analyze(args)",
  "    def read_compile_db_files()",
  "                        if str(f).startswith(str(pathlib.Path(p).resolve())) or str(f)",
  "                        if str(f)",
  "    def run_proc(cmd, cwd=None)",
  "            for line in (res.stdout + \"\\n\" + res.stderr)",
  "            # Parse export-fixes YAML (if any)",
  "                if content and isinstance(content, dict)",
  "                                } for r in repl if isinstance(r, dict)",
  "        def parse_iwyu(text: str)",
  "                if mode in ('add','remove') ",
  "def cmd_reduce(args)",
  "def main()",
  "    if getattr(args, \"sub\", None)",
  "### Install via npm (Recommended)",
  "# Create simple icon (you should replace this with a real icon)",
  "    def __init__(self, success: bool, summary: str, details: Optional[Dict] = None)",
  "    def __init__(self, source_dir: str = \".\", build_dir: str = \"build\", log_dir: str = \"logs\")",
  "    def _save_log(self, name: str, content: str, structured_data: Optional[Dict] = None)",
  "        with open(log_file, 'w') ",
  "            with open(json_file, 'w') ",
  "    def _parse_cmake_errors(self, stderr: str) ",
  "    def _parse_compiler_errors(self, stderr: str) ",
  "    def _parse_test_results(self, output: str) ",
  "        summary_pattern = r'(\\d+)% tests passed, (\\d+) tests failed out of (\\d+)",
  "            # Individual test results (running tests)",
  "                    if not any(t.get('name') ",
  "    def configure(self, cmake_args: Optional[List[str]] = None) ",
  "            return BuildResult(True, \"✅ Configure successful\")",
  "                if len(errors) ",
  "                    summary += f\" (and {len(errors)-1} more error{'s' if len(errors)",
  "                summary = \"❌ Configure failed (see logs for details)",
  "            return BuildResult(False, summary, {'errors': errors})",
  "    def build(self, target: Optional[str] = None, jobs: Optional[int] = None) ",
  "            return BuildResult(True, \"✅ Build successful\")",
  "            # Filter to show only errors (not warnings) ",
  "                if len(actual_errors) ",
  "                    summary += f\" (and {len(actual_errors)-1} more error{'s' if len(actual_errors)",
  "                summary = \"❌ Build failed (see logs for details)",
  "            return BuildResult(False, summary, {'errors': errors})",
  "    def test(self, test_pattern: Optional[str] = None, verbose: bool = False) ",
  "            return BuildResult(True, f\"✅ All {summary['total']} tests passed\")",
  "                if len(failed_tests) ",
  "    def clean(self) ",
  "        return BuildResult(True, \"✅ Clean successful\")",
  "def main()",
  "- A tiny wrapper CLI (`llmtk`) ",
  "- “Context pack” commands to export artifacts LLMs thrive on (compile DB, CMake JSON, logs)",
  "- Every subcommand supports JSON output (or writes JSON to a file) ",
  "- A `llmtk context export` that gathers canonical inputs (e.g., `compile_commands.json`, sanitizer logs, perf traces)",
  "3) Standard compilation tools (`manifest/tools.yaml`) ",
  "4) Build management: a Python script (`build_manager.py`) that configures, builds, and tests with strict flags (`-Werror -Wall -Wextra -Wconversion -Wshadow`), sanitizer support (`-fsanitize=undefined,address`)",
  "## What to build (current status)",
  "- `llmtk doctor` – machine‑readable health report (exports/doctor.json)",
  "- `llmtk context export` – emits compile DB + CMake File API (exports/context.json)",
  "### Package Managers (Recommended)",
  "- `--prefix DIR` - Change wrapper prefix (default `~/.local`)",
  "- `--dir DIR` - Change install directory (default `~/.local/share/llm-cpp-toolkit`)"
],
  "stats": {
    "total_files": 179,
    "cpp_files_count": 0,
    "cmake_files_count": 1
  }
}
